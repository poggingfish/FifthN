inline" $_tryparse = Tryparse.new\n "
macro loop
nextval
inline" for  " getval inline"  in 1..$stack.Pop() do\n " 
endmac
macro beginif
inline" if $stack.Pop()  "
endmac
macro endif
inline" $stack.Pop()\n "
endmac
macro if==
$beginif inline" == " $endif
endmac
macro if<
$beginif inline" < " $endif
endmac
macro if>
$beginif inline" > " $endif
endmac
macro if>=
$beginif inline" >= " $endif
endmac
macro if<=
$beginif inline" <= " $endif
endmac
macro return
inline" return\n "
endmac
macro else
inline" else\n "
endmac
proc dup
inline" $stack.Push($stack.Peek)\n "
end
proc swap
inline" a=$stack.Pop()\nb=$stack.Pop()\n$stack.Push(a)\n$stack.Push(b)\n "
end
proc println
. " \n " .
end
proc input
inline" $stack.Push(gets.chomp)\n "
end
proc fopen
inline" $stack.Push(File.open($stack.Pop,$stack.Pop))\n "
end
proc fwrites
inline" $stack.Pop().write($stack.Pop)\n "
end
proc int
inline" $stack.Push($stack.Pop().to_i)\n "
end
proc split
inline" $stack.Push($stack.Pop().split($stack.Pop))\n "
end
proc length
inline" $stack.Push($stack.Pop().length())\n "
end
proc index
inline" $stack.Push($stack.Pop()[$stack.Pop()])\n "
end
proc ptrue
inline" $stack.Push(true)\n "
end
proc pfalse
inline" $stack.Push(false)\n "
end
proc tryparse
inline" $stack.Push($_tryparse.intparse($stack.Pop))\n "
end
proc startswith
inline" a = $stack.Pop()\nb = $stack.Pop()\n$stack.Push(a.start_with?(b))\n "
end
proc sub
inline" $stack.Push($stack.Pop().sub($stack.Pop(), $stack.Pop()))\n "
end
proc gsub
inline" $stack.Push($stack.Pop().gsub($stack.Pop(), $stack.Pop()))\n "
end
macro whiletrue
inline" while true\n "
endmac
macro break
inline" break\n "
endmac